{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"TransE_v0.1","private_outputs":true,"provenance":[{"file_id":"1Fcf8vkuaO6VCOB3MAZlpDebCAgyUnMBj","timestamp":1622011803283},{"file_id":"1PWs42Oztq5uscIIKNJZTtRI0fT0TF-Z5","timestamp":1597824801511},{"file_id":"1rylqOnm992AdP9z1aW8metlKpPuBTRGD","timestamp":1597760520257}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"id":"4dcvCAfyDc5S"},"source":["%tensorflow_version 1.x"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"vs4xn9CWE5Yx"},"source":["import tensorflow as tf \n","\n","print('TensorFlow  version: {}'.format(tf.__version__))\n","\n","device_name = tf.test.gpu_device_name()\n","if device_name != '/device:GPU:0':\n","  raise SystemError('GPU device not found')\n","print('Found GPU at: {}'.format(device_name))\n","\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"5YrEBZ9m42a1"},"source":["%%capture \n","! pip install ampligraph\n","! pip install --user tensorboard"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"KqGjJ_SYFxIH"},"source":["import ampligraph\n","import numpy as np\n","import pandas as pd\n","import tensorflow as tf\n","from ampligraph.datasets import load_fb15k_237\n","from ampligraph.evaluation import train_test_split_no_unseen, evaluate_performance, mr_score, mrr_score, hits_at_n_score\n","from ampligraph.latent_features import TransE\n","from ampligraph.utils import save_model\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"rpgO0ucg2qTx"},"source":["def display_metrics(ranks):\n","    print('Mean Rank:', mr_score(ranks)) \n","    print('Mean Reciprocal Rank:', mrr_score(ranks)) \n","    print('Hits@1:', hits_at_n_score(ranks, 1))\n","    print('Hits@3:', hits_at_n_score(ranks, 3))\n","    print('Hits@10:', hits_at_n_score(ranks, 10))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"IYLn3NXKegOm"},"source":["from ampligraph.datasets import load_fb15k_237"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"cHzhvBhbegPX"},"source":["import pandas as pd\n","\n","URL = 'https://ampgraphenc.s3-eu-west-1.amazonaws.com/datasets/freebase-237-merged-and-remapped.csv'\n","dataset = pd.read_csv(URL, header=None)\n","dataset.columns = ['subject', 'predicate', 'object']\n","dataset.head(5)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"4pgpcidHegQC"},"source":["dataset.shape"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"ltijAdQtegQN"},"source":["from ampligraph.evaluation import train_test_split_no_unseen\n","\n","test_train, X_valid = train_test_split_no_unseen(dataset.values, 500, seed=0)\n","X_train, X_test = train_test_split_no_unseen(test_train, 1000, seed=0)\n","\n","print('Total triples:', dataset.shape)\n","print('Size of train:', X_train.shape)\n","print('Size of valid:', X_valid.shape)\n","print('Size of test:', X_test.shape)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"PwGHTYHq4U81"},"source":["from ampligraph.evaluation import train_test_split_no_unseen\n","test_train, X_valid = train_test_split_no_unseen(dataset.values, 500, seed=0)\n","X_train, X_test = train_test_split_no_unseen(test_train, 1000, seed=0)\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"hBXrmiA1lzjO"},"source":["# Train a model\n","model = TransE(k=50, \n","              epochs=100, \n","              eta=1, \n","              loss='pairwise', loss_params={'margin': 1},\n","              initializer='xavier', initializer_params={'uniform': False},\n","              regularizer='LP', regularizer_params= {'lambda': 0.001, 'p': 2},\n","              optimizer= 'adam', optimizer_params= {'lr': 0.001}, \n","              seed= 0, batches_count= 10, verbose=True)\n","\n","model.fit(X_train)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"xsMg_qfW4jav"},"source":["# Evaluate: \n","from ampligraph.utils import save_model, restore_model\n","save_model(model, 'TransE.pkl')\n","model = restore_model('TransE.pkl')\n","\n","X_filter = np.concatenate([X_train, X_valid, X_test], 0)\n","\n","ranks = evaluate_performance(X_test, model=model, filter_triples=X_filter)\n","\n","display_metrics(ranks)"],"execution_count":null,"outputs":[]}]}